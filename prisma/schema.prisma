generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RegistrationStatus {
  CONFIRMED
  RESERVED
}

enum UserRole {
  USER
  SUPERADMIN
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  image           String?
  rttfProfileUrl  String?
  role            UserRole     @default(USER)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  accounts        Account[]
  sessions        Session[]
  registrations   Registration[]
  adminPlaces     PlaceAdmin[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Place {
  id          String       @id @default(cuid())
  name        String       @unique
  location    String?
  description String?
  infoUrl     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  events      Event[]
  admins      PlaceAdmin[]
}

model PlaceAdmin {
  id        String   @id @default(cuid())
  userId    String
  placeId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId])
}

model Event {
  id              String   @id @default(cuid())
  title           String
  startAt         DateTime
  placeId         String
  place           Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  capacity        Int?
  reserveCapacity Int?
  regs            Registration[]

  @@index([placeId, startAt])
}

model Registration {
  id        String              @id @default(cuid())
  userId    String
  eventId   String
  status    RegistrationStatus  @default(CONFIRMED)
  createdAt DateTime            @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId, status, createdAt])
}